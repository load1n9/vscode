name: Whistle
scopeName: source.whistle
patterns:
  - include: "#keywords"
  - include: "#operators"
  - include: "#literals"
  - include: "#strings"
  - include: "#comments"
repository:

  keywords:
    patterns:
      - name: keyword.control.whistle
        match: \b(export|fun|return|if|while|loop|break|continue|var|val)\b
      - name: keyword.control.import.whistle
        match: \b(import|from)\b
      - name: keyword.control.type.whistle
        match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(i32|i64|f32|f64|string|char|bool|none)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
  operators:
    patterns: 
      - name: keyword.operator.assignment.whistle
        match: "="
      - name: keyword.operator.expression.in.whistle
        match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
      - name: keyword.operator.assignment.compound.whistle  
        match: "\\*=|(?<!\\()/=|%=|\\+=|\\-="
      - name: keyword.operator.assignment.compound.bitwise.whistle
        match: "\\&=|\\^=|<<=|>>=|>>>=|\\|="
      - name: keyword.operator.bitwise.shift.whistle
        match: "<<|>>>|>>"
      - name: keyword.operator.comparison.whistle
        match: "<=|>=|<>|<|>|==|!="
      - name: keyword.operator.logical.whistle
        match: "\\!|&&|\\|\\||\\?\\?"
      - name: keyword.operator.bitwise.whistle
        match: "\\&|~|\\^|\\|"
      - name: keyword.operator.assignment.whistle
        match: "\\="
      - name: keyword.operator.arithmetic.whistle
        match: "%|\\*|/|-|\\+"
      - begin: "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))"
        end: "(?:(/=)|(?:(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)))"
        endCaptures:
          "1":
            name: keyword.operator.assignment.compound.whistle
          "2":
            name: keyword.operator.arithmetic.whistle
        patterns:
          - include: "#comments"
      - begin: "[&|]"
        beginCaptures:
          "0":
            name: keyword.operator.type.whistle
        end: "(?=\\S)"
      - match: "(?<=[_$[:alnum:]])(\\!)\\s*(?:(/=)|(?:(/)(?![/*])))"
        captures:
            "1":
              name: keyword.operator.logical.whistle
            "2":
              name: keyword.operator.assignment.compound.whistle
            "3":
              name: keyword.operator.arithmetic.whistle
          
      

  literals:
    patterns:
      - include: "#boolean-literal"
      - include: "#none-literal"
      - include: "#numericConstant-literal"
      - include: "#numeric-literal"
    repository:
      boolean-literal:
        patterns:
          - name: constant.language.boolean.true.whistle
            match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
          - name: constant.language.boolean.false.whistle
            match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
      none-literal:
        name: constant.language.null.whistle
        match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))none(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
      numericConstant-literal:
        patterns:
          - name: constant.language.nan.whistle
            match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
          - name: constant.language.infinity.whistle
            match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
      numeric-literal:
        patterns:
          - include: "#hex"
          - include: "#binary"
          - include: "#octal"
          - include: "#decimal"
        repository:
          hex:
            name: constant.numeric.hex.whistle
            match: "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)"
            captures:
              "1":
                name: storage.type.numeric.bigint.whistle
          binary:
            name: constant.numeric.binary.whistle
            match: "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)"
            captures:
              "1":
                name: storage.type.numeric.bigint.whistle
          octal:
            name: constant.numeric.octal.whistle
            match: "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)"
            captures:
              "1":
                name: storage.type.numeric.bigint.whistle
          decimal:
            match: "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)"
            captures:
              "0":
                name: constant.numeric.decimal.whistle
              "1":
                name: meta.delimiter.decimal.period.whistle
              "2":
                name: storage.type.numeric.bigint.whistle
              "3":
                name: meta.delimiter.decimal.period.whistle
              "4":
                name: storage.type.numeric.bigint.whistle
              "5":
                name: meta.delimiter.decimal.period.whistle
              "6":
                name: storage.type.numeric.bigint.whistle
              "7":
                name: storage.type.numeric.bigint.whistle
              "8":
                name: meta.delimiter.decimal.period.whistle
              "9":
                name: storage.type.numeric.bigint.whistle
              "10":
                name: meta.delimiter.decimal.period.whistle
              "11":
                name: storage.type.numeric.bigint.whistle
              "12":
                name: meta.delimiter.decimal.period.whistle
              "13":
                name: storage.type.numeric.bigint.whistle
              "14":
                name: storage.type.numeric.bigint.whistle

  strings:
    patterns:
      - include: "#double"
      - include: "#single"
    repository:
      double:
        name: string.quoted.double.whistle
        begin: '"'
        end: '"'
        patterns:
          - { name: constant.character.escape.whistle, match: \\. }
      single:
        name: string.quoted.single.whistle
        begin: "'"
        end: "'"
        patterns:
          - { name: constant.character.escape.whistle, match: \\. }
  comments:
    patterns:
      - include: "#block"
      - include: "#single-line"
    repository:
      block:
        name: comment.block.whistle
        begin: "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?"
        beginCaptures:
          "1":
            name: punctuation.definition.comment.whistle
          "2":
            name: storage.type.internaldeclaration.whistle
          "3":
            name: punctuation.decorator.internaldeclaration.whistle

        end: "\\*/"
        endCaptures:
          "0":
            name: punctuation.definition.comment.whistle
      single-line:
        name: comment.singleline.whistle
        begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)"
        beginCaptures:
          "1":
            name: punctuation.whitespace.comment.leading.whistle
          "2":
            name: comment.line.double-slash.whistle
          "3":
            name: punctuation.definition.comment.whistle
          "4":
            name: storage.type.internaldeclaration.whistle
          "5":
            name: punctuation.decorator.internaldeclaration.whistle
        end: "(?=^)"
